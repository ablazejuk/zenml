---
name: release-finalize
  # TODO: Change this back into pull_request and closed and merged==true
  # TODO: Remove the merged trigger
  # TODO: Remove the echos
  # TODO: Generalize the parameterization
  # TODO: Extract the old version and the new version in a job first
on:
  push:
    branches: [misc/prepare-release-*]
env:
  ZENML_ANALYTICS_OPT_IN: false
jobs:
  create-release-branch:
    if: contains(github.event.head_commit.message, '[merged]')
    runs-on: ubuntu-latest
    steps:
      # Check out develop
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          ref: develop
      # Configure Git
      - name: Configure git
        shell: bash
        run: |
          git config --global user.email "info@zenml.io"
          git config --global user.name "ZenML GmbH"
      # Extract the version name
      - name: Extract version from branch name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          NEW_VERSION=${BRANCH_NAME#misc/prepare-release-}
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      #  Push the changes
      - name: Push the changes
        run: |
          git checkout -b release/${{ env.NEW_VERSION }}
          git push --set-upstream origin release/${{ env.NEW_VERSION }}
  add-docs-warning-header:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      # Check out develop
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          ref: main
      # Configure Git
      - name: Configure git
        shell: bash
        run: |
          git config --global user.email "info@zenml.io"
          git config --global user.name "ZenML GmbH"
      # Extract the old version name
      - name: Fetch the old version
        run: |
          OLD_VERSION=$(cat src/zenml/VERSION)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
      # Check out the previous release branch
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          ref: release/${{ env.OLD_VERSION }}
      # Create the docs update PR
      - name: Create docs update PR
        shell: bash
        run: |
          bash scripts/add-docs-warning.sh ${{ env.OLD_VERSION }}
  create-migration-test:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      # Check out develop
      - name: Checkout code
        uses: actions/checkout@v4.1.1
      # Setting up the Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      # Extract the new version name
      - name: Extract version from branch name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          NEW_VERSION=${BRANCH_NAME#misc/prepare-release-}
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      # Extract the old version name # TODO: This is wrong
      - name: Fetch the old version
        run: |
          OLD_VERSION=$(cat src/zenml/VERSION)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
      # Create the migration test version if necessary
      - name: Create docs update PR
        shell: bash
        run: |-
          bash scripts/add-migration-test-version.sh ${{ env.OLD_VERSION }} ${{ env.NEW_VERSION }}
  update-gitbook:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      # Check out develop
      - name: Checkout code
        uses: actions/checkout@v4.1.1
      # Setting up the Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      # Extract the new version name
      - name: Extract version from branch name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          NEW_VERSION=${BRANCH_NAME#misc/prepare-release-}
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      # Extract the old version name
      - name: Fetch the old version
        run: |
          OLD_VERSION=$(cat src/zenml/VERSION)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
      # Adjust the docs
      - name: Adjust gitbook docs
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
          PREV_VERSION: ${{ env.OLD_VERSION }}
          LEGACY_COLLECTION_ID: ${{ secrets.GITBOOK_LEGACY_COLLECTION_ID }}
          GITBOOK_API_KEY: ${{ secrets.GITBOOK_API_KEY }}
        run: python path/to/sync_script.py
